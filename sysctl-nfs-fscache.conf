# [Azure NFS Reference](https://learn.microsoft.com/en-us/azure/azure-netapp-files/performance-linux-filesystem-cache)
# [SYSCTL Reference](https://www.kernel.org/doc/html/latest/admin-guide/sysctl/vm.html)
# [Linux Filesystem Cache](https://www.baeldung.com/linux/file-system-caching)

# vm.dirty_bytes
# Contains the amount of dirty memory at which a process generating disk writes will itself start writeback.
# NOTE: dirty_bytes is the counterpart of dirty_ratio. ONLY ONE of them may be specified at a time. When one sysctl is written it is immediately taken into account to
# evaluate the dirty memory limits and the other appears as 0 when read.
vm.dirty_bytes = 31457280

# vm.dirty_background_bytes
# Contains the amount of dirty memory at which the background kernel flusher threads will start writeback.
# NOTE: dirty_background_bytes is the counterpart of dirty_background_ratio. ONLY ONE of them may be specified at a time. When one sysctl is written it is immmediately
# taken into account to evaluate the dirty memory limits and the other appears as 0 when read.
vm.dirty_background_bytes = 16777216

# vm.dirty_ratio
# Contains , as a percentage of total available memory that contains free pages and reclaimable pages, the number of pages at which a process which is generating disk
# writes will itself start writing out dirty data.
# NOTE: The total available memory is not equal to total system memory.
vm.dirty_ratio = 0

# vm.dirty_background_ratio
# Contains, as a percentage of total available memory that contains free pages and reclaimable pages, the number of pages at which the background kernel flusher
# threads will start writing out dirty data.
# NOTE: The total available memory is not equal to total system memory.
vm.dirty_background_ratio = 0

# vm.dirty_expire_centisecs
# This tunable is used to define when dirty data is old enough to be eligible for writeout by the kernel flusher threads. It is expressed in 100'ths of a second.
# Data which has been dirty in-memory for longer than this interval will be written out next time a flusher thread wakes up.
vm.dirty_expire_centisecs = 300

# vm.dirty_writeback_centisecs
# The kernel flusher threads will periodically wake up and write old data out to disk. This tunable expresses the interval between those wakeups, in 100'ths of a second.
# NOTE: Setting this to zero disables periodic writeback altogether.
vm.dirty_writeback_centisecs = 100

# vm.dirtytime_expire_seconds
# When a lazytime inode is constantly having its pages dirtied, the inode with an updated timestamp will never get a chance to be written out.
# And, if the only thing that has happened on the filesystem is a dirtytime inode caused by an atime update, a worker will be scheduled to make sure that inode eventually
# gets pushed out to disk. This tunable is used to define when dirty inode is old enough to be eligible for writeback by the kernel flusher threads. And, it is also used
# as the interval to wakeup dirtytime writeback thread.
# The default is 43200 seconds (12 hours)
vm.dirtytime_expire_seconds = 3600
